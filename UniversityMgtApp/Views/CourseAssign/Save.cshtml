@model UniversityMgtApp.Models.CourseAssign

@{
    ViewBag.Title = "Save";
}

<style>
    fieldset.scheduler-border {
        border: solid 1px #DDD !important;
        padding: 0 55px;
        border-bottom: none;
        border-radius: 10px;
        width: 600px;
    }

    legend.scheduler-border {
        width: auto !important;
        border: none;
        font-size: 20px;
        font-weight: bold;
    }
</style>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">

        @Html.ValidationSummary(true)
        <fieldset class="scheduler-border">
            <legend class="scheduler-border">Course Assign to Teacher</legend>

            <div class="form-group">
                @Html.LabelFor(model => model.DepartmentId, new {@class = "col-md-5"})
                <div class="col-md-6">
                    @Html.DropDownListFor(model => model.DepartmentId, new SelectList(ViewBag.Department, "DepartmentId", "DepartmentName"), "--Select Department--", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "validation" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TeacherId, new {@class = "col-md-5"})
                <div class="col-md-6">
                    @Html.DropDownListFor(model => model.TeacherId, new SelectList(""), "--Select Teacher--", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TeacherId, "", new { @class = "validation" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreditToBeTaken, new {@class = "col-md-5"})
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.CreditToBeTaken, new { @class = "form-control", @readonly = "ReadOnly" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RemainingCredit, new {@class = "col-md-5"})
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.RemainingCredit, new { @class = "form-control", @readonly = "ReadOnly" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CourseId, new {@class = "col-md-5"})
                <div class="col-md-6">
                    @Html.DropDownListFor(model => model.CourseId, new SelectList(""), "--Select Course--", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CourseId, "", new { @class = "validation" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CourseName, new {@class = "col-md-5"})
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.CourseName, new { @class = "form-control", @readonly = "ReadOnly" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CourseCredit, new {@class = "col-md-5"})
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.CourseCredit, new { @class = "form-control", @readonly = "ReadOnly" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-5 col-md-6">
                    <input id="saveButton" type="submit" value="Assign" class="btn btn-default" />
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-5 col-md-6">
                    <span style="color:green; font-weight:bold;">@ViewBag.Success</span>
                    <span style="color:red; font-weight:bold;">@ViewBag.Exist</span>
                </div>
            </div>
        </fieldset>
</div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script>
    $(document).ready(function() {
        $("#DepartmentId").change(function() {
            var departmentId = $("#DepartmentId").val();

            $('#TeacherId').empty();
            $('#CourseId').empty();
            $('#CreditToBeTaken').val("");
            $('#RemainingCredit').val("");
            $('#CourseName').val("");
            $('#CourseCredit').val("");

            $.ajax({
                type: "POST",
                url: '@Url.Action("GetTeacher", "CourseAssign")',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ departmentId: departmentId }),

                success: function(teacherCourses) {
                    $("#TeacherId").append('<option value="">' + "--Select Teacher--" + '</option>');
                    $.each(teacherCourses.teachers, function(key, value) {
                        $("#TeacherId").append('<option value=' + value.TeacherId + '>' + value.TeacherName + '</option>');
                    });

                    $("#CourseId").append('<option value="">' + "--Select Course--" + '</option>');
                    $.each(teacherCourses.courses, function(key, value) {
                        $("#CourseId").append('<option value=' + value.CourseId + '>' + value.CourseCode + '</option>');
                    });
                },

            });
        });

        $("#TeacherId").change(function() {
            var teacherId = $("#TeacherId").val();

            $('#CreditToBeTaken').val("");
            $('#RemainingCredit').val("");

            $.ajax({
                type: "POST",
                url: '@Url.Action("GetTeacherDetail", "CourseAssign")',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ teacherId: teacherId }),

                success: function (creditToBeTakenRemainingCredit) {
                    $("#CreditToBeTaken").val(creditToBeTakenRemainingCredit.teacherDetails.CreditToBeTaken);
                    $("#RemainingCredit").val(creditToBeTakenRemainingCredit.remainingCredit);
                },

            });
        });

        $("#CourseId").change(function() {
            var courseId = $("#CourseId").val();

            $('#CourseName').val("");
            $('#CourseCredit').val("");

            $.ajax({
                type: "POST",
                url: '@Url.Action("GetCourseDetail", "CourseAssign")',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ courseId: courseId }),

                success: function(courseDetails) {
                    $("#CourseName").val(courseDetails.CourseName);
                    $("#CourseCredit").val(courseDetails.CourseCredit);
                },

            });
        });

        $("#saveButton").on("click", function() {

            var a = parseFloat($('#RemainingCredit').val());
            var b = parseFloat($('#CourseCredit').val());
            var c = a + b;
            var d = parseFloat($('#CreditToBeTaken').val());

            if (a != d) {
                if (a < b) {

                    if (confirm("Course credit is more than teacher's remaining credit. Are you sure you want to Save this?")) {
                    } else {
                        return false;
                    }
                }
            }
        });
    });
</script>
}